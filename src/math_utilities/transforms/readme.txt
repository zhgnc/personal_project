The "transforms" library provides functions for converting between different representations of 3D rotations and 
transformations of the same template type 'T'. Currently the library includes rotations between the following 
types and the conventions used follow Zanettiâ€™s paper: "Rotations, Transformations, Left Quaternions, Right Quaternions?".

- Rotation Vectors (`rot_vec<T>`)
- Quaternions (`quat<T>`)
- Rotation Matrices ('matrix<T,3,3>')
- Transformation Matrices ('matrix<T,3,3>')

Note, the term rotation matrix is used to denote an active rotation where as a transformation matrix representes a passive
rotation. This distinction follows the convention in Zanetti's paper. When transforming a matrix into a quaternion, it is
assumed that the matrix is a rotation matrix because the active Hamilton quaternion convention is used. A transformation 
matrix can still be converted to a quaternion in the library but the quaternion will represent a rotation in the opposite 
direction.  

Here is an example, to construct a DCM from frame 1 to frame 2, the columns of the DCM represent the axes of frame 1 
expressed in frame 2, while the rows represent the axes of frame 2 expressed in frame 1. If this DCM represents a +90 
deg rotation about the z-axis of frame 1, then the DCM from frame 1 to frame 2 equals '{0,1,0; -1,0,0; 0,0,1}'. This DCM is 
an active rotation and thus a rotation matrix. When the 'to_quat()' function is used to convert a matrix into a quaternion, 
the transforms library assumes the matrix passed into the function is a rotation matrix so that the quaternion generated by 
the function represents the rotation from frame 1 to 2. If the DCM above, 'dcm_1_to_2', is used to rotate a column vector, 
let's say 'vec = {1,0,0}', then 'dcm_1_to_2 * vec = {0,1,0}'. If the transformation matrix, 'dcm_2_to_1', is used to rotate the 
same vector, where 'dcm_2_to_1' equals the transpose of 'dcm_1_to_2', then 'dcm_2_to_1 * vec = {-1,0,0}'. In the same convention,
if 'dcm_1_to_2' is converted to a quaternion, 'q_1_to_2', then 'q_1_to_2 * vec = {0,1,0}'.  

Here are the conversions currently implemented.

| Function Name                 | Parameters                        | Return Type  | Description                                            | Example Usage                                          |
|:------------------------------|:----------------------------------|:------------ |:-------------------------------------------------------|:-------------------------------------------------------|
| `to_quat()`                   | `const rot_vec<T>& rotation_vec`  | `quat`       | Converts a rotation vector to a quaternion             | `q = to_quat(rotation_vector);`                        |
| `to_quat()`                   | `const matrix<T,3,3>& mat'        | `quat`       | Converts a rotation matrix to a quaternion             | `q = to_quat(rotation_matrix);`                        |
| `to_rotation_matrix()`        | `const rot_vec<T>& rotation_vec`  | `matrix`     | Converts a rotation vector to an rotation matrix       | `rot_mat = to_rotation_matrix(rotation_vec);`          |
| `to_rotation_matrix()`        | `const quat<T>& quaternion`       | `matrix`     | Converts a quaternion to an rotation matrix            | `rot_mat = to_rotation_matrix(q);`                     |
| `to_transformation_matrix()`  | `const rot_vec<T>& rotation_vec`  | `matrix`     | Converts a rotation vector to a transformation matrix  | `trans_mat = to_transformation_matrix(rotation_vec);`  |
| `to_transformation_matrix()`  | `const quat<T>& quaternion`       | `matrix`     | Converts a quaternion to a transformation matrix       | `trans_mat = to_transformation_matrix(q);`             |
| `to_rot_vec()`                | `const quat<T>& quaternion`       | `rot_vec`    | Converts a quaternion to a rotation vector             | `rotation_vec = to_rot_vec(quaternion);`               |
| `to_rot_vec()`                | `const matrix<T,3,3>& mat'        | `rot_vec`    | Converts a rotation matrix to a rotation vector        | `rotation_vec = to_rot_vec(matrix);`                   |